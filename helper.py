#!/usr/bin/env python

"""
Simple helper functions for Kippo-Malware
"""

import os
import sys
import argparse
import urlparse
import ConfigParser
from clint.textui import puts, indent, colored


def parse_arguments():
    #Parse arguments from command line
    parser = argparse.ArgumentParser()
    parser.add_argument("-D", "--directory", default=os.getcwd() + os.path.sep + 'downloads',
                        help="Directory to save the files -- DEFAULT: current/downloads")
    parser.add_argument("-H", "--hostname", default="127.0.0.1", help="MySQL server hostname -- DEFAULT: 127.0.0.1")
    parser.add_argument("-P", "--port", type=int, default=3306, help="MySQL server port -- DEFAULT: 3306")
    parser.add_argument("-u", "--username", default="kippo", help="MySQL server username -- DEFAULT: kippo")
    parser.add_argument("-p", "--password", default="kippo", help="MySQL server password -- DEFAULT: kippo")
    parser.add_argument("-d", "--database", default="kippo", help="MySQL server database -- DEFAULT: kippo")
    parser.add_argument("-c", "--config", default=None,
                        help="Kippo config file (overwrites above arguments) -- EXAMPLE: /opt/kippo/kippo.cfg")
    parser.add_argument("--proxy", default=None, help="HTTP proxy (with protocol) -- EXAMPLE: http://10.10.1.10:8080")
    parser.add_argument("--user-agent", default=None, help="Custom User-Agent -- DEFAULT: Environment-based")
    parser.add_argument("--debug", action="store_true", help="Enable debugging messages")
    args = parser.parse_args()

    #Parse arguments from config file (if given)
    if args.config:
        try:
            config_parser = ConfigParser.ConfigParser()
            config_parser.read(args.config)
            args.directory = config_parser.get('honeypot', 'download_path')
            args.hostname = config_parser.get('database_mysql', 'host')
            if args.hostname == "localhost":
                args.hostname = "127.0.0.1"
            args.port = int(config_parser.get('database_mysql', 'port'))
            args.username = config_parser.get('database_mysql', 'username')
            args.password = config_parser.get('database_mysql', 'password')
            args.database = config_parser.get('database_mysql', 'database')
        except ConfigParser.Error:
            print colored.red(
                "\nERROR => Could not find a valid config file and/or uncommented MySQL settings inside it. Exiting...")
            sys.exit(1)

    if args.debug:
        print_args(args)

    return args


def normalize_urls(urls):
    #1. Strip whitespace and keep only the last part in case of spaces
    #2. Add protocol in front of urls which are not http or ftp
    #3. Remove duplicates from url list
    urls = [url.strip().split()[-1] for url in urls]
    urls = ['http://' + url if urlparse.urlparse(url).scheme != 'http' and urlparse.urlparse(url).scheme != 'ftp'
            else url for url in urls]
    urls = list(set(urls))
    return urls


def print_args(args):
    args = vars(args)
    print "\n{Arguments}:"
    with indent():
        for key, value in args.items():
            puts(key + ' = ' + str(value))


def print_urls(urls):
    print "\n{URL list}:"
    for i, url in enumerate(urls):
        print str(i+1) + '. ' + url
    print "\nTotal: %d URLs" % len(urls)