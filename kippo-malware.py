#!/usr/bin/env python

"""
Kippo-Malware is a script to download and save all malicious files from a Kippo SSH honeypot database.
Website: http://bruteforce.gr/kippo-malware
Author: ikoniaris
"""

import sys
import os
import requests
from clint.textui import progress, colored
from pony.orm import *
from helper import *


class KippoMalware:
    def __init__(self, args):
        """
        Initializes object and setups connection with the Kippo database.
        """
        self.args = args
        self.urls = []
        try:
            self.db = Database('mysql', host=args.hostname, port=args.port, user=args.username,
                               passwd=args.password, db=args.database)
        except DatabaseError:
            print colored.red(
                "\nERROR => Could not connect to MySQL server. Please run the program with '-h' parameter for help.")
            sys.exit(-1)

    def get_urls(self):
        """
        Fetches URLs from the Kippo database.
        """
        with db_session:
            urls = self.db.select(
                "SELECT DISTINCT TRIM(LEADING 'wget' FROM LOWER(input)) "
                "FROM input "
                "WHERE input LIKE 'wget%' AND input != 'wget' "
                "ORDER BY timestamp DESC")

            self.urls = normalize_urls(urls)

            if self.args.debug:
                print_urls(self.urls)

    def download_malware(self):
        """
        Downloads files from previously fetched URL list.
        """
        if not os.path.exists(self.args.directory):
            try:
                os.makedirs(self.args.directory)
            except IOError:
                print colored.yellow("\n%d. WARNING => Error while creating download directory.")

        proxies, headers = {}, {}
        if self.args.proxy:
            proxies = {
                "http": self.args.proxy,
                "https": self.args.proxy,
                "ftp": self.args.proxy
            }
        if self.args.user_agent:
            headers = {'User-Agent': self.args.user_agent}

        counter = 1
        for url in self.urls:
            file_name = self.args.directory + os.path.sep + url.split("/")[-1]

            try:
                r = requests.get(url, stream=True, headers=headers, proxies=proxies, verify=False)
                total_length = int(r.headers['content-length'])

                if total_length:
                    with open(file_name, 'wb') as f:
                        print colored.green("\n%d. Downloading: %s" % (counter, url))
                        for chunk in progress.bar(r.iter_content(chunk_size=1024),
                                                  expected_size=(total_length / 1024) + 1):
                            if chunk:
                                f.write(chunk)
                                f.flush()

            except (requests.RequestException, TypeError, Exception):
                if self.args.debug:
                    print colored.yellow("\n%d. WARNING => Error while downloading: %s" % (counter, url))
            finally:
                counter += 1


def main():
    args = parse_arguments()
    downloader = KippoMalware(args)
    downloader.get_urls()
    downloader.download_malware()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print colored.cyan("\nCaught keyboard interrupt. Exiting...")
        sys.exit(1)